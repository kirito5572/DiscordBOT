//// Source code recreated from a .class file by IntelliJ IDEA// (powered by FernFlower decompiler)//package com.kirito5572.listener.main;import com.kirito5572.App;import com.kirito5572.objects.main.CommandManager;import java.io.File;import java.io.FileReader;import java.util.Map;import java.util.Objects;import java.util.concurrent.TimeUnit;import net.dv8tion.jda.api.JDA;import net.dv8tion.jda.api.Permission;import net.dv8tion.jda.api.entities.Member;import net.dv8tion.jda.api.entities.MessageChannel;import net.dv8tion.jda.api.entities.TextChannel;import net.dv8tion.jda.api.events.ReadyEvent;import net.dv8tion.jda.api.events.interaction.SlashCommandEvent;import net.dv8tion.jda.api.events.message.guild.GuildMessageReceivedEvent;import net.dv8tion.jda.api.hooks.ListenerAdapter;import org.jetbrains.annotations.NotNull;import org.slf4j.Logger;import org.slf4j.LoggerFactory;public class Listener extends ListenerAdapter {    private final CommandManager manager;    private final Logger logger = LoggerFactory.getLogger(Listener.class);    private static String ID1;    private static String ID2;    private static Map<String, String> botChannel;    public Listener(CommandManager manager) {        this.manager = manager;    }    public void onReady(@NotNull ReadyEvent event) {        this.logger.info("main_core 로그인 성공: " + event.getJDA().getSelfUser().getAsTag());        System.out.println("main_core 로그인 성공: " + event.getJDA().getSelfUser().getAsTag());    }    public void onSlashCommand(@NotNull SlashCommandEvent event) {        String channelId = botChannel.get(Objects.requireNonNull(event.getGuild()).getId());        if (channelId == null) {            channelId = "0";        }        if (event.getCommandString().startsWith("/")) {            if (!channelId.equals(event.getChannel().getId()) && !channelId.equals("error") && !channelId.equals("0")) {                Member member = event.getMember();                assert member != null;                if (!member.hasPermission(Permission.MESSAGE_MANAGE) && !member.hasPermission(Permission.MANAGE_CHANNEL) && !member.hasPermission(Permission.MANAGE_PERMISSIONS) && !member.hasPermission(Permission.MANAGE_ROLES) && !member.hasPermission(Permission.MANAGE_SERVER) && !member.hasPermission(Permission.ADMINISTRATOR)) {                    MessageChannel var10000 = event.getChannel();                    String var10001 = member.getAsMention();                    var10000.sendMessage(var10001 + ", <#" + channelId + ">에서 명령어를 사용하여주세요").complete().delete().queueAfter(5L, TimeUnit.SECONDS);                }            }            this.manager.handleCommand(event);        }    }    public void onGuildMessageReceived(@NotNull GuildMessageReceivedEvent event) {        StringBuilder IDReader = new StringBuilder();        StringBuilder IDReader1 = new StringBuilder();        int signalCh;        int signalCh1;        try {            File file = new File("C:\\DiscordServerBotSecrets\\rito-bot\\OWNER_ID.txt");            File file1 = new File("C:\\DiscordServerBotSecrets\\rito-bot\\OWNER_ID1.txt");            FileReader fileReader = new FileReader(file);            FileReader fileReader1 = new FileReader(file1);            while((signalCh = fileReader.read()) != -1) {                IDReader.append((char)signalCh);            }            while((signalCh1 = fileReader1.read()) != -1) {                IDReader1.append((char)signalCh1);            }        } catch (Exception var11) {            StackTraceElement[] eStackTrace = var11.getStackTrace();            StringBuilder a = new StringBuilder();            signalCh = eStackTrace.length;            for(signalCh1 = 0; signalCh1 < signalCh; ++signalCh1) {                StackTraceElement stackTraceElement = eStackTrace[signalCh1];                a.append(stackTraceElement).append("\n");            }            this.logger.warn(a.toString());        }        ID1 = IDReader.toString();        ID2 = IDReader1.toString();        if (event.getMessage().getContentRaw().equalsIgnoreCase(App.getPREFIX() + "종료") && (event.getAuthor().getIdLong() == Long.decode(ID1) || event.getAuthor().getIdLong() == Long.decode(ID2))) {            this.shutdown(event.getJDA(), event);        } else if (!event.getAuthor().isBot() || event.getAuthor().getId().equals("617912267597676545")) {            if (!event.getMessage().isWebhookMessage()) {                String channelId = botChannel.get(event.getGuild().getId());                if (channelId == null) {                    channelId = "0";                }                if (event.getMessage().getContentRaw().startsWith(App.getPREFIX())) {                    if (!channelId.equals(event.getChannel().getId()) && !channelId.equals("error") && !channelId.equals("0")) {                        Member member = event.getMember();                        assert member != null;                        if (!member.hasPermission(Permission.MESSAGE_MANAGE) && !member.hasPermission(Permission.MANAGE_CHANNEL) && !member.hasPermission(Permission.MANAGE_PERMISSIONS) && !member.hasPermission(Permission.MANAGE_ROLES) && !member.hasPermission(Permission.MANAGE_SERVER) && !member.hasPermission(Permission.ADMINISTRATOR)) {                            TextChannel var10000 = event.getChannel();                            String var10001 = member.getAsMention();                            var10000.sendMessage(var10001 + ", <#" + channelId + ">에서 명령어를 사용하여주세요").complete().delete().queueAfter(5L, TimeUnit.SECONDS);                        }                    }                    this.manager.handleCommand(event);                }            }        }    }    private void shutdown(@NotNull JDA jda, @NotNull GuildMessageReceivedEvent event) {        (new Thread(() -> {            event.getChannel().sendMessage("봇이 종료됩니다.").queue();            try {                Thread.sleep(500L);            } catch (InterruptedException var10) {                StackTraceElement[] eStackTrace = var10.getStackTrace();                StringBuilder a = new StringBuilder();                for (StackTraceElement stackTraceElement : eStackTrace) {                    a.append(stackTraceElement).append("\n");                }                this.logger.warn(a.toString());            }            jda.shutdown();            System.exit(0);        })).start();    }    public static String getID1() {        return ID1;    }    public static String getID2() {        return ID2;    }    public static void setBotChannel(Map<String, String> botChannel) {        Listener.botChannel = botChannel;    }}